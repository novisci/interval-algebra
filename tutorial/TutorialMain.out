Generated by running `cabal run tutorial -v0 > tutorial/TutorialMain.out`
Do not edit by hand


-- tag::interval-show-print[]

-- An example Interval Integer
print ivInteger
---> (2, 6)

-- An example Interval Day
print ivDay
---> (1967-01-18, 1967-01-24)

-- An example Interval UTCTime
print ivUTC
---> (1967-01-18 09:00:00 UTC, 1967-01-18 09:13:20 UTC)
-- end::interval-show-print[]
-- tag::interval-basic-instances-print[]

print $ ivInteger == ivInteger
---> True

print $ ivDay < ivDay
---> False

print $ show ivInteger
---> "(2, 6)"
-- end::interval-basic-instances-print[]
-- tag::parseinterval-print[]

print rightIvInteger
---> Right (0, 2)

print leftIvInteger
---> Left (ParseErrorInterval "2<=2")

print rightIvDay
---> Right (1967-01-18, 1967-01-22)

print rightIvUTC
---> Right (1967-01-18 09:00:00 UTC, 1967-01-18 09:13:20 UTC)
-- end::parseinterval-print[]
-- tag::safeinterval-print[]

print ivInteger
---> (2, 6)

print ivMinDurInteger
---> (2, 3)

print ivInteger
---> (2, 6)

print ivDay
---> (1967-01-18, 1967-01-24)

print ivUTC
---> (1967-01-18 09:00:00 UTC, 1967-01-18 09:13:20 UTC)
-- end::safeinterval-print[]
-- tag::beginerval-enderval-print[]

print (beginerval 2 3 :: Interval Integer)
---> (3, 5)

print (beginerval (-2) 3 :: Interval Integer)
---> (3, 4)

print (enderval 2 12 :: Interval Integer)
---> (10, 12)

print (enderval (-2) 12 :: Interval Integer)
---> (11, 12)
-- end::beginerval-enderval-print[]
-- tag::creating-moments-print[]

print (beginervalMoment 11 :: Interval Integer)
---> (11, 12)

print (endervalMoment 11 :: Interval Integer)
---> (10, 11)
-- end::creating-moments-print[]
-- tag::creating-pairedinterval-print[]

print pairListstringInteger
---> {(2, 6), ["John","Paul","George","Ringo"]}

print pairStringDay
---> {(1967-01-18, 1967-01-24), "vacation"}
-- end::creating-pairedinterval-print[]
-- tag::pairedinterval-basic-instances-print[]

print $ pairStringDay == pairStringDay
---> True

print $ pairListstringInteger < pairListstringInteger
---> False

print $ show pairStringDay
---> "{(1967-01-18, 1967-01-24), \"vacation\"}"
-- end::pairedinterval-basic-instances-print[]
-- tag::pairedinterval-getset-intervals-print[]

print pairListstringInteger
---> {(2, 6), ["John","Paul","George","Ringo"]}

print $ getInterval pairListstringInteger
---> (2, 6)

print $ setInterval pairListstringInteger (safeInterval (4, 9) :: Interval Integer)
---> {(4, 9), ["John","Paul","George","Ringo"]}

print $ intervals [pairListstringInteger, pairListstringInteger]
---> [(2, 6),(2, 6)]

print $ begin pairListstringInteger
---> 2

print $ end pairListstringInteger
---> 6
-- end::pairedinterval-getset-intervals-print[]
-- tag::pairedinterval-getset-data-print[]

print pairStringDay
---> {(1967-01-18, 1967-01-24), "vacation"}

print $ getPairData pairStringDay
---> "vacation"

print $ makePairedInterval "ski trip" (getInterval pairStringDay)
---> {(1967-01-18, 1967-01-24), "ski trip"}
-- end::pairedinterval-getset-data-print[]
-- tag::intervallic-interval-instance-print[]

print ivInteger
---> (2, 6)

print $ getInterval ivInteger
---> (2, 6)

print $ setInterval ivInteger (beginerval 3 12 :: Interval Integer)
---> (12, 15)

print $ begin ivInteger
---> 2

print $ end ivInteger
---> 6
-- end::intervallic-interval-instance-print[]
-- tag::intervalsizeable-instance-print[]

print ivDay
---> (1967-01-18, 1967-01-24)

print $ moment @Day
---> 1

print $ duration ivDay
---> 6

print $ add 15 (begin ivDay)
---> 1967-02-02

print $ diff (add 15 (begin ivDay)) (begin ivDay)
---> 15
-- end::intervalsizeable-instance-print[]
-- tag::intervalcombinable-interval-print[]

-- The Just Interval formed from combining the Intervals, since iv0to2 `meets` iv2to5
print $ iv0to2 .+. iv2to5
---> Just (0, 5)

-- A Nothing since iv0to2 doesn't `meets` iv5to8
print $ iv0to2 .+. iv5to8
---> Nothing

-- The Just Interval formed from the end of the first and the beginning of the
-- second, since iv0to2 is `before` iv5to8
print $ iv0to2 >< iv5to8
---> Just (2, 5)

-- A Nothing since iv0to2 isn't `before` iv2to5
print $ iv0to2 >< iv2to5
---> Nothing

-- A list with iv0to2 and iv3to6, since:
--     * iv0to2 is `before` iv3to6
--     * We have specified a list as the return type
--     * Lifting a value to a list returns a list with the input as the sole
--       element
--     * `<>` for lists concatenates the lists
print (iv0to2 <+> iv3to6 :: [Interval Integer])
---> [(0, 2),(3, 6)]

-- A list with one `Interval` spanning iv2to4 and iv3to6, since the former is
-- not `before` the latter
print (iv2to4 <+> iv3to6 :: [Interval Integer])
---> [(2, 6)]

-- A Right with iv0to2, since:
--     * iv0to2 is `before` iv3to6
--     * We have specified Either as the return type
--     * Lifting a value to an Either returns a Right
--     * `<>` for two Rights returns the first Right
print (iv0to2 <+> iv3to6 :: Either () (Interval Integer))
---> Right (0, 2)

-- A Right with one `Interval` spanning iv2to4 and iv3to6, since the former is
-- not `before` the latter
print (iv2to4 <+> iv3to6 :: Either () (Interval Integer))
---> Right (2, 6)
-- end::intervalcombinable-interval-print[]
-- tag::intervalcombinable-pairedinterval-print[]

-- The Just Interval formed from combining the Intervals and taking the data
-- portion from the second argument, since iv0to2 `meets` iv2to5
print $ makePairedInterval "a" iv0to2 .+. makePairedInterval "b" iv2to5
---> Just {(0, 5), "b"}

-- A Nothing since iv0to2 doesn't `meets` iv5to8
print $ makePairedInterval "a" iv0to2 .+. makePairedInterval "b" iv5to8
---> Nothing

-- The Just Interval formed from spanning the Intervals and taking the data
-- portion from the `mempty` method of the Monoid String instance, since
-- iv0to2 is `before` iv5to8
print $ makePairedInterval "a" iv0to2 >< makePairedInterval "b" iv5to8
---> Just {(2, 5), ""}

-- A Nothing since iv0to2 isn't `before` iv2to5
print $ makePairedInterval "a" iv0to2 >< makePairedInterval "b" iv2to5
---> Nothing

-- A list with elements (makePairedInterval "a" iv0to2) and 
-- (makePairedInterval "b" iv3to6), since:
--     * iv0to2 is `before` iv3to6
--     * We have specified a list as the return type
--     * Lifting a value to a list returns a list with the input as the sole
--       element
--     * `<>` for lists concatenates the lists
print (makePairedInterval "a" iv0to2 <+> makePairedInterval "b" iv3to6 :: [PairedInterval String Integer])
--->[{(0, 2), "a"},{(3, 6), "b"}]

-- A list with one `PairedInterval` where the embedded Interval spans iv2to4
-- and iv3to6, and where the data is obtained by concatenating the embedded
-- Strings, since:
--     * iv2to4 is not `before` iv3to6
--     * `<>` for Strings concatenates the Strings
--     * We have specified a list as the return type
--     * Lifting a value to a list returns a list with the input as the sole
--       element
print (makePairedInterval "a" iv2to4 <+> makePairedInterval "b" iv3to6 :: [PairedInterval String Integer])
--->[{(2, 6), "ab"}]

-- A Right with (makePairedInterval "a" iv0to2), since:
--     * iv0to2 is `before` iv3to6
--     * We have specified Either as the return type
--     * Lifting a value to an Either returns a Right
--     * `<>` for two Rights returns the first Right
print (makePairedInterval "a" iv0to2 <+> makePairedInterval "b" iv3to6 :: Either () (PairedInterval String Integer))
---> Right {(0, 2), "a"}

-- A Right with a `PairedInterval` where the embedded interval spans iv2to4
-- and iv3to6, and where the data is obtained by concatenating the embedded
-- Strings, since:
--     * iv2to4 is not `before` iv3to6
--     * `<>` for Strings concatenates the Strings
--     * We have specified Either as the return type
--     * Lifting a value to an Either returns a Right
print (makePairedInterval "a" iv2to4 <+> makePairedInterval "b" iv3to6 :: Either () (PairedInterval String Integer))
---> Right {(2, 6), "ab"}
-- end::intervalcombinable-pairedinterval-print[]
-- tag::expanding-intervals-print[]

print ivInteger
---> (2, 6)

print $ expandl 4 ivInteger
---> (-2, 6)

print $ expandl 0 ivInteger
---> (2, 6)

print $ expandr 5 ivInteger
---> (2, 11)

print $ expandr (-3) ivInteger
---> (2, 6)

print $ expand 4 5 ivInteger
---> (-2, 11)

print $ expand 0 (-3) ivInteger
---> (2, 6)
-- end::expanding-intervals-print[]
-- tag::sharing-endpoint-interval-print[]

print ivInteger
---> (2, 6)

beginervalFromEnd 5 ivInteger
---> (6, 11)

beginervalFromEnd (-2) ivInteger
---> (6, 7)

endervalFromBegin 12 ivInteger
---> (-10, 2)

endervalFromBegin (-6) ivInteger
---> (1, 2)

print $ momentize ivInteger
---> (2, 3)
-- end::sharing-endpoint-interval-print[]
-- tag::shifting-intervals-print[]

print [iv2to4, iv5to8]
---> [(2, 4),(5, 8)]

print ivDay
---> (1967-01-18, 1967-01-24)

print $ shiftFromBegin iv2to4 iv5to8
---> (3, 6)

print $ shiftFromBegin ivDay ivDay
---> (0, 6)

print $ shiftFromEnd iv2to4 iv5to8
---> (1, 4)

print $ shiftFromEnd ivDay ivDay
---> (-6, 0)
-- end::shifting-intervals-print[]
-- tag::relations-variables-diagram-print[]
--           <- [iv0to2]
  --         <- [iv2to4]
  ---        <- [iv2to5]
   ---       <- [iv3to6]
    -        <- [iv4to5]
      --     <- [iv6to8]
     ---     <- [iv5to8]
============
-- end::relations-variables-diagram-print[]
-- tag::composing-relations-print[]

print endedPriorRelations
---> fromList [Before,Meets]

print notEndedPriorRelations
---> fromList [Overlaps,FinishedBy,Contains,Starts,Equals,StartedBy,During,Finishes,OverlappedBy,MetBy,After]

print notEndedPriorRelations'
---> fromList [Overlaps,FinishedBy,Contains,Starts,Equals,StartedBy,During,Finishes,OverlappedBy,MetBy,After]

print intervalRelations'
---> fromList [Before,Meets,Overlaps,FinishedBy,Contains,Starts,Equals,StartedBy,During,Finishes,OverlappedBy,MetBy,After]

print empty
---> fromList []
-- end::composing-relations-print[]
-- tag::composing-predicates-1-print[]

print $ iv0to2 `precedes` iv3to6
print $ iv0to2 `meets` iv3to6
print $ iv0to2 `endedPrior` iv3to6
---> True
---> False
---> True
-- end::composing-predicates-1-print[]
-- tag::composing-predicates-2-print[]

print $ iv0to2 `precedes` iv2to4
print $ iv0to2 `meets` iv2to4
print $ iv0to2 `endedPrior` iv2to4
---> False
---> True
---> True
-- end::composing-predicates-2-print[]
-- tag::composing-predicates-3-print[]

print $ iv5to8 `precedes` iv2to4
print $ iv5to8 `meets` iv2to4
print $ iv5to8 `endedPrior` iv2to4
---> False
---> False
---> False
-- end::composing-predicates-3-print[]
-- tag::extended-example-1-print[]

print $ head results
---> ProcessedSubj {getEnrollment = Just (6, 430), getFirstTrt = Just {(22, 23), Treatment NewVaccine}, getFirstFlu = Nothing, getTrtType = Just NewVaccine, getTimeToFlu = Nothing, getTimeToEndEnr = Just 407}

print $ results !! 1
---> ProcessedSubj {getEnrollment = Just (2, 214), getFirstTrt = Just {(98, 99), Treatment StandardVaccine}, getFirstFlu = Nothing, getTrtType = Just StandardVaccine, getTimeToFlu = Nothing, getTimeToEndEnr = Just 115}

print $ results !! 2
---> ProcessedSubj {getEnrollment = Just (7, 205), getFirstTrt = Just {(19, 20), Treatment StandardVaccine}, getFirstFlu = Just {(180, 181), Diagnosis Flu}, getTrtType = Just StandardVaccine, getTimeToFlu = Just 160, getTimeToEndEnr = Just 185}

print $ results !! 3
---> ProcessedSubj {getEnrollment = Just (3, 97), getFirstTrt = Nothing, getFirstFlu = Nothing, getTrtType = Nothing, getTimeToFlu = Nothing, getTimeToEndEnr = Nothing}
-- end::extended-example-1-print[]
